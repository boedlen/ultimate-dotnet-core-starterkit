${
    using Typewriter.Extensions.WebApi;

    string ReturnType(Method m) => m.Type.Name == "IHttpActionResult" ? "void" : m.Type.Name;
    string ServiceName(Class c) => c.Name.Replace("ApiController", "Controller");
    string ParentServiceName(Method m) => ServiceName((Class)m.Parent);
}

/// <reference path="../typings/jquery/jquery.d.ts" />
${//The do not modify block below is intended for the outputed typescript files... }
//*************************DO NOT MODIFY**************************
//
//THESE FILES ARE AUTOGENERATED WITH TYPEWRITER AND ANY MODIFICATIONS MADE HERE WILL BE LOST
//PLEASE VISIT http://frhagn.github.io/Typewriter/ TO LEARN MORE ABOUT THIS VISUAL STUDIO EXTENSION
//
//*************************DO NOT MODIFY**************************
module TypeWriter.Templates {
    $Classes(*ApiController)[
    export class $ServiceName {
        public _baseUrl: string;

        constructor(baseUrl: string){
            this._baseUrl = baseUrl;
        }

        $Methods[
        // $HttpMethod: $Url
        private Route$Name = ($Parameters(p => p.Type.IsPrimitive)[$name: $Type][, ]) => `${this._baseUrl}$Url`;
        public $name($Parameters[$name: $Type][, ]): JQueryPromise<$ReturnType> {
            return $.ajax({
                url: this.Route$Name($Parameters(p => p.Type.IsPrimitive)[$name][, ]),
                type: '$HttpMethod',
                data: $RequestData
            });
        }]
    }]
}